#include <stdio.h>

struct Process {
    int pid;    // Process ID
    int bt;     // Burst Time
    int at;     // Arrival Time
    int wt;     // Waiting Time
    int tat;    // Turnaround Time
    int completed; // Flag to check if process is completed
};

int main() {
    int n, i, time = 0, completed_processes = 0;
    float total_wt = 0, total_tat = 0;

    printf("Enter number of processes: ");
    scanf("%d", &n);

    struct Process p[n];

    // Input process details
    for(i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("Enter Arrival Time and Burst Time for P%d: ", i + 1);
        scanf("%d %d", &p[i].at, &p[i].bt);
        p[i].completed = 0;
    }

    printf("\nGantt Chart: \n");

    while(completed_processes < n) {
        int idx = -1;
        int min_bt = 100000; // Large number

        // Find the process with shortest burst time among arrived processes
        for(i = 0; i < n; i++) {
            if(p[i].at <= time && !p[i].completed) {
                if(p[i].bt < min_bt) {
                    min_bt = p[i].bt;
                    idx = i;
                }
            }
        }

        if(idx == -1) {
            time++; // No process is ready, increment time
        } else {
            printf("| P%d ", p[idx].pid);
            time += p[idx].bt;  // Run process to completion
            p[idx].tat = time - p[idx].at; // Turnaround Time
            p[idx].wt = p[idx].tat - p[idx].bt; // Waiting Time
            total_tat += p[idx].tat;
            total_wt += p[idx].wt;
            p[idx].completed = 1;
            completed_processes++;
        }
    }

    printf("|\n");

    printf("\nAverage Turnaround Time = %.2f\n", total_tat / n);
    printf("Average Waiting Time = %.2f\n", total_wt / n);

    return 0;
}
