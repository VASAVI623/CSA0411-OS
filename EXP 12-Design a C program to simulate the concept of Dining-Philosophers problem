#include <stdio.h>
#include <pthread.h>
#include <unistd.h>

#define NUM_PHILOSOPHERS 5

pthread_mutex_t forks[NUM_PHILOSOPHERS];

void* philosopher(void* arg) {
    int id = *((int*)arg);

    for(int i = 0; i < 3; i++) {  // Each philosopher eats 3 times
        printf("Philosopher %d is thinking.\n", id);
        sleep(1);  // Thinking

        // Pick up forks (mutex lock)
        if (id % 2 == 0) {
            pthread_mutex_lock(&forks[id]);               // Left fork
            pthread_mutex_lock(&forks[(id + 1) % NUM_PHILOSOPHERS]); // Right fork
        } else {
            pthread_mutex_lock(&forks[(id + 1) % NUM_PHILOSOPHERS]); // Right fork
            pthread_mutex_lock(&forks[id]);               // Left fork
        }

        printf("Philosopher %d is eating.\n", id);
        sleep(2);  // Eating

        // Put down forks (mutex unlock)
        pthread_mutex_unlock(&forks[id]);
        pthread_mutex_unlock(&forks[(id + 1) % NUM_PHILOSOPHERS]);
    }

    return NULL;
}

int main() {
    pthread_t philosophers[NUM_PHILOSOPHERS];
    int ids[NUM_PHILOSOPHERS];

    // Initialize mutexes for forks
    for(int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_init(&forks[i], NULL);
    }

    // Create philosopher threads
    for(int i = 0; i < NUM_PHILOSOPHERS; i++) {
        ids[i] = i;
        pthread_create(&philosophers[i], NULL, philosopher, &ids[i]);
    }

    // Wait for all philosophers to finish
    for(int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(philosophers[i], NULL);
    }

    // Destroy mutexes
    for(int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_destroy(&forks[i]);
    }

    printf("Dining Philosophers simulation completed.\n");
    return 0;
}
