#include <stdio.h>

struct Process {
    int pid;        // Process ID
    int bt;         // Burst Time
    int rt;         // Remaining Time
    int wt;         // Waiting Time
    int tat;        // Turnaround Time
    int at;         // Arrival Time
};

int main() {
    int n, i, time = 0, completed = 0, quantum;
    float total_wt = 0, total_tat = 0;

    printf("Enter number of processes: ");
    scanf("%d", &n);

    struct Process p[n];

    for(i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("Enter Arrival Time and Burst Time for P%d: ", i + 1);
        scanf("%d %d", &p[i].at, &p[i].bt);
        p[i].rt = p[i].bt;  // Initialize remaining time
    }

    printf("Enter Time Quantum: ");
    scanf("%d", &quantum);

    printf("\nGantt Chart: \n");

    while(completed < n) {
        int done = 1;
        for(i = 0; i < n; i++) {
            if(p[i].rt > 0 && p[i].at <= time) {
                done = 0;
                if(p[i].rt > quantum) {
                    printf("| P%d ", p[i].pid);
                    p[i].rt -= quantum;
                    time += quantum;
                } else {
                    printf("| P%d ", p[i].pid);
                    time += p[i].rt;
                    p[i].rt = 0;
                    completed++;
                    p[i].tat = time - p[i].at;      // Turnaround Time
                    p[i].wt = p[i].tat - p[i].bt;   // Waiting Time
                    total_tat += p[i].tat;
                    total_wt += p[i].wt;
                }
            }
        }
        if(done) {
            time++; // If no process is ready, increment time
        }
    }

    printf("|\n");

    printf("\nAverage Turnaround Time = %.2f\n", total_tat / n);
    printf("Average Waiting Time = %.2f\n", total_wt / n);

    return 0;
}
