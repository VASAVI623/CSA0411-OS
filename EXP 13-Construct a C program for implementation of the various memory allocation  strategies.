#include <stdio.h>

#define MAX_BLOCKS 10
#define MAX_PROCESSES 10

void first_fit(int block_size[], int m, int process_size[], int n) {
    int allocation[n];
    for(int i = 0; i < n; i++) allocation[i] = -1;

    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            if(block_size[j] >= process_size[i]) {
                allocation[i] = j;
                block_size[j] -= process_size[i];
                break;
            }
        }
    }

    printf("\nFirst Fit Allocation:\nProcess\tSize\tBlock\n");
    for(int i = 0; i < n; i++)
        printf("%d\t%d\t%s\n", i+1, process_size[i], allocation[i] != -1 ? "Allocated" : "Not Allocated");
}

void best_fit(int block_size[], int m, int process_size[], int n) {
    int allocation[n];
    for(int i = 0; i < n; i++) allocation[i] = -1;

    for(int i = 0; i < n; i++) {
        int best_idx = -1;
        for(int j = 0; j < m; j++) {
            if(block_size[j] >= process_size[i]) {
                if(best_idx == -1 || block_size[j] < block_size[best_idx])
                    best_idx = j;
            }
        }
        if(best_idx != -1) {
            allocation[i] = best_idx;
            block_size[best_idx] -= process_size[i];
        }
    }

    printf("\nBest Fit Allocation:\nProcess\tSize\tBlock\n");
    for(int i = 0; i < n; i++)
        printf("%d\t%d\t%s\n", i+1, process_size[i], allocation[i] != -1 ? "Allocated" : "Not Allocated");
}

void worst_fit(int block_size[], int m, int process_size[], int n) {
    int allocation[n];
    for(int i = 0; i < n; i++) allocation[i] = -1;

    for(int i = 0; i < n; i++) {
        int worst_idx = -1;
        for(int j = 0; j < m; j++) {
            if(block_size[j] >= process_size[i]) {
                if(worst_idx == -1 || block_size[j] > block_size[worst_idx])
                    worst_idx = j;
            }
        }
        if(worst_idx != -1) {
            allocation[i] = worst_idx;
            block_size[worst_idx] -= process_size[i];
        }
    }

    printf("\nWorst Fit Allocation:\nProcess\tSize\tBlock\n");
    for(int i = 0; i < n; i++)
        printf("%d\t%d\t%s\n", i+1, process_size[i], allocation[i] != -1 ? "Allocated" : "Not Allocated");
}

int main() {
    int block_size[MAX_BLOCKS], process_size[MAX_PROCESSES];
    int m, n;

    printf("Enter number of memory blocks: ");
    scanf("%d", &m);
    printf("Enter size of each memory block: ");
    for(int i = 0; i < m; i++)
        scanf("%d", &block_size[i]);

    printf("Enter number of processes: ");
    scanf("%d", &n);
    printf("Enter size of each process: ");
    for(int i = 0; i < n; i++)
        scanf("%d", &process_size[i]);

    //
