#include <stdio.h>

int main() {
    int n, m; // n = number of processes, m = number of resources
    int i, j, k;

    printf("Enter number of processes: ");
    scanf("%d", &n);
    printf("Enter number of resources: ");
    scanf("%d", &m);

    int max[n][m], alloc[n][m], need[n][m], avail[m], finish[n];

    // Input Maximum matrix
    printf("Enter Max matrix for each process:\n");
    for(i = 0; i < n; i++) {
        printf("Process %d: ", i);
        for(j = 0; j < m; j++)
            scanf("%d", &max[i][j]);
    }

    // Input Allocation matrix
    printf("Enter Allocation matrix for each process:\n");
    for(i = 0; i < n; i++) {
        printf("Process %d: ", i);
        for(j = 0; j < m; j++)
            scanf("%d", &alloc[i][j]);
    }

    // Input Available resources
    printf("Enter Available resources: ");
    for(j = 0; j < m; j++)
        scanf("%d", &avail[j]);

    // Calculate Need matrix
    for(i = 0; i < n; i++)
        for(j = 0; j < m; j++)
            need[i][j] = max[i][j] - alloc[i][j];

    // Initialize Finish array
    for(i = 0; i < n; i++)
        finish[i] = 0;

    int safe[n], count = 0;

    printf("\nSafe sequence calculation using Bankerâ€™s Algorithm:\n");

    while(count < n) {
        int found = 0;
        for(i = 0; i < n; i++) {
            if(finish[i] == 0) {
                int can_allocate = 1;
                for(j = 0; j < m; j++) {
                    if(need[i][j] > avail[j]) {
                        can_allocate = 0;
                        break;
                    }
                }
                if(can_allocate) {
                    // Allocate resources
                    for(k = 0; k < m; k++)
                        avail[k] += alloc[i][k];
                    safe[count++] = i;
                    finish[i] = 1;
                    found = 1;
                    break;
                }
            }
        }
        if(!found) {
            printf("System is not in a safe state! Deadlock may occur.\n");
            return 0;
        }
    }

    printf("System is in a safe state.\nSafe sequence: ");
    for(i = 0; i < n; i++)
        printf("P%d ", safe[i]);
    printf("\n");

    return 0;
}
